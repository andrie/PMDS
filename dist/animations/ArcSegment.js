import{Y as w,X as m,o as r,Z as d,B as y,p as M,_ as v}from"./makeScene2D.js";var P=globalThis&&globalThis.__decorate||function(h,e,t,i){var a=arguments.length,n=a<3?e:i===null?i=Object.getOwnPropertyDescriptor(e,t):i,o;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")n=Reflect.decorate(h,e,t,i);else for(var s=h.length-1;s>=0;s--)(o=h[s])&&(n=(a<3?o(n):a>3?o(e,t,n):o(e,t))||n);return a>3&&n&&Object.defineProperty(e,t,n),n};class l extends w{constructor(e,t,i,a,n,o){super(),this.startPoint=e,this.radius=t,this.xAxisRotationDegree=i,this.largeArcFlag=a,this.sweepFlag=n,this.endPoint=o,this.xAxisRotation=this.xAxisRotationDegree*m,this.radius=new r(Math.abs(t.x),Math.abs(t.y));const s=e.sub(o).div(2).transform(d.fromRotation(-i).domMatrix),g=s.x*s.x/(t.x*t.x)+s.y*s.y/(t.y*t.y);if(g>1){const A=Math.sqrt(g);t.x=A*t.x,t.y=A*t.y}const c=new r(t.ctg*s.y,t.perpendicular.ctg*s.x).scale(Math.sqrt(1/(s.x*s.x/(t.x*t.x)+s.y*s.y/(t.y*t.y))-1)*(a===n?-1:1));this.xAxisRotationMatrix=d.fromRotation(i).domMatrix,this.center=c.transform(this.xAxisRotationMatrix).add(e.add(o).div(2));const x=s.sub(c).div(t),f=s.scale(-1).sub(c).div(t);this.startAngle=x.radians,this.deltaAngle=r.angleBetween(x,f)%(Math.PI*2),this.sweepFlag===0&&this.deltaAngle>0&&(this.deltaAngle-=Math.PI*2),this.sweepFlag===1&&this.deltaAngle<0&&(this.deltaAngle+=Math.PI*2),l.el.setAttribute("d",`M ${this.startPoint.x} ${this.startPoint.y} A ${this.radius.x} ${this.radius.y} ${this.xAxisRotationDegree} ${this.largeArcFlag} ${this.sweepFlag} ${this.endPoint.x} ${this.endPoint.y}`),this.length=l.el.getTotalLength();const p=new y(l.el.getBBox());this.points=[p.topLeft,p.bottomRight]}getAnglePosition(e){return this.radius.mul(r.fromRadians(e)).transform(this.xAxisRotationMatrix).add(this.center)}getAngleDerivative(e){return new r(-this.radius.x*Math.sin(e),this.radius.y*Math.cos(e)).transform(this.xAxisRotationMatrix)}draw(e,t,i,a){const n=this.startAngle+this.deltaAngle*t,o=this.startAngle+this.deltaAngle*i,s=this.getPoint(t),g=this.getPoint(i);return a&&e.moveTo(s.position.x,s.position.y),e.ellipse(this.center.x,this.center.y,this.radius.x,this.radius.y,this.xAxisRotation,n,o,this.sweepFlag===0),[s,g]}getPoint(e){const t=this.startAngle+e*this.deltaAngle,i=this.getAngleDerivative(t).normalized;return{position:e===0?this.startPoint:e===1?this.endPoint:this.getAnglePosition(t),tangent:i,normal:i.perpendicular}}get arcLength(){return this.length}}P([M(()=>{const h=document.createElementNS("http://www.w3.org/2000/svg","svg"),e=document.createElementNS("http://www.w3.org/2000/svg","path");return h.appendChild(e),v.shadowRoot.appendChild(h),e})],l,"el",void 0);export{l as A};
